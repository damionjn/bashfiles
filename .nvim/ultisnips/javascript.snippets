# Use strict
snippet u
'use strict'

${1}
endsnippet

# console log
snippet cl
console.log(${1})
endsnippet

# console log parameters
snippet cll
console.log('${1:}', $1)
endsnippet

# console error
snippet ce
console.error(${1})
endsnippet

# Parameter Comment
snippet pdoc
/**
 * ${1}
 */
endsnippet

snippet f "Anonymous function" ws
function (${1}) {
  ${2}
}
endsnippet

# Function declaration
snippet fun
function ${1}(${2}) {
  ${3}
}
endsnippet

# Function expression
snippet vf
var = ${1} function (${2}) {
  ${3}
}
endsnippet

# Self-invoking Function
snippet si
!function (${1}) {
  ${2}
}()
endsnippet

# Node require
snippet vr
var ${1:} = require('$1')
endsnippet

# Node require
snippet lt
let ${1:} = require('$1')
endsnippet

# Export
snippet mod
module.exports = ${1}
endsnippet

# Function export
snippet modf
module.exports = function (${1}) {
  ${2}
}
endsnippet

# Unit describe
snippet des
describe('${1}', function () {
  ${2}
})
endsnippet

# Unit assertion
snippet it
it('${1}', function () {
  ${2}
})
endsnippet

# Angular unit beforeEach
snippet bei
beforeEach(inject(function (${1}) {
  ${2}
}))
endsnippet

# Prototype
snippet proto
${1}.prototype.${2} = function (${3}) {
  ${4}
}
endsnippet

# if
snippet if
if (${1}) {
  ${2}
}
endsnippet

# if else
snippet ife
if (${1}) {
  ${2}
} else {
  ${3}
}
endsnippet

# ternary conditional
snippet ter
${1}
  ? ${2}
  : ${3}
endsnippet

# switch
snippet switch
switch (${1}) {
  case '${3}':
    ${4}
    break
  ${5}
  default:
    ${2}
}
endsnippet

# for loop
snippet for
for (var i = 0; i < ${1:}.length; i++) {
  $1[i]
}
endsnippet

# Improved native for-loop
snippet forr
for (var ${2:} = ${1:}.length - 1; $2 >= 0; $2--) {
  ${3:$1[$2]}
}
endsnippet

# setTimeout function
snippet timeout
setTimeout(function () {
  ${3}
}${2}, ${1:500})
endsnippet

# Get by ID
snippet getid
document.getElementById('${1}')
endsnippet

# Get by Tag name
snippet gettag
document.getElementsByTagName('${1}')
endsnippet

# Get by Class name
snippet getclass
document.getElementsByClassName('${1}')
endsnippet

# Query Selector
snippet qs
document.querySelector('${1}')
endsnippet

# Query Selector
snippet qsa
document.querySelectorAll('${1}')
endsnippet

# Bind
snippet .b
.bind(${1})
endsnippet

# Import
snippet im
import ${1} from '${2}'
endsnippet

# Export default
snippet ed
export default ${1}
endsnippet

snippet .t "Then" s
.then(function (${1}) {
  ${2}
}${3:, function (err) {

}})
endsnippet

# Catch
snippet .c
.catch(function (err) {
  ${1}
})
endsnippet

#	Filter
snippet _f
_.filter(${1}, function (${2}) {
  ${3}
})
endsnippet

#	Map
snippet _m
_.map(${1}, function (${2}) {
  ${3}
})
endsnippet

# ES6
# Constant
snippet co
const ${1} = ${2}
endsnippet

snippet f* "Generator function" ws
function* ${1}() {
	${2}
}
endsnippet

snippet rnp "Return new promise" s
return new Promise(function (resolve, reject) {
	${1}
})
endsnippet

snippet lr "Let require"
let ${1} = require('$1')
endsnippet

snippet cr "Constant require"
const ${1} = require('$1')
endsnippet

